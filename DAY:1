A database is a collection of data stored in a format that can be easily accessed,managed and updated.

 Database management system are software systems used to manage and manipulate data in database..

A DBMS serves as an interface between an end-user and a database, allowing uses to create,read,update and delete data in the database..
A Relational database management system stores the information in the form of the table.
Invoice can be defined as information about the order of the table.

Sql databases are vertically scalable while NoSql database are the horizontally scalable..

Non-relational databases use a storage model that is optimized for the specific requirements of the type of the data being stored.

For Example:  classicmodels.employees ----------> In this classicmodels is the name of the database and the employees is the name of the tables..

If we want to select the particular column then the syntax could be appeared like this.....  Select [firstName,LastName] from (table_name)
------------------------------------------------------------------------------------------------------------------------------------------------------
             ................... SELECT STATEMENTS.......... 
  [Use] keywords is used for selecting the databases...

 [Select] keywords is used to for selection statements....

 [Where] keywords is used for conditional statements....
 [order by] is used for sorting the table.....
  EXAMPLE:  order by firstName......  Table is used to sort the data.....

--------------------------------- SELECT CLAUSE   ------------------------------
   To change the name of the column we use the [AS] keywords.....
For Example: MRP as "Selling Price"

  To change or Add the column in the table we also use the [AS] keywords...
  for example (MRP*0.90 +1) as "Discount Price"..

--------------------- WHERE CLAUSE ------------------------------------
EXAMPLE: 
  select *
   from orders 
     where status != "shipped"

Note: We can use all the comparision operator with where clause and [not equal to] represented as (<> / !=)...

-------------------  LOGICAL OPERATORS -----------------------------
AND, OR and NOT 
EXAMPLE:
      Select *
      form payments 
      where NOT (amount >=40000 AND amount<= 50000)
Note : AND has the higher prefrence than the OR...

 Example:
   Select * 
   from payments 
   where (amount <=40000 or amount>=60000) AND paymentDate>='2005-05-25'...

------------------  IN OPERATORS  ----------------------------------------
IN operators is used to remove the use of multiple OR operators and the code more readable...

For EXAMPLE:
  Select *
  from Employees
  where officeCode IN (1,2,4)
  Order By officeCode..

EXAMPLE 2:
Select *
  from Employees
  where officeCode NOT IN (1,2,4)
  Order By officeCode..
------------------------------------ BETWEEN OPERATORS ----------------------
Note : Between Operator is used with the AND operators..

  Example:
   select *
      from customers
     where creditList Between 20000 AND 40000.
----------------------  LIKE OPERATORS  ------------------------------------
  TO select the data which are start with a partciular letter 
    we use :
           where name like "abcd%"
     % used at the last because to include the words which are started with these...
     %....% is used to match the keywords which include the keywords [....]

Problem :
   Select the firstname which starts ...  
Solution:
   Select * from the employees where firstname LIKE "...%".

Select the firstname which end with y ?
Solution: Select * from the employees where firstname LIKE "%y".

Note: _ is used to calculate the character .....
for Example:
  find the first name in which 3rd letter is a?
Solution:  Select * from the employees where firstname LIKE "___a".


-------------------  REGULAR EXPRESSION (REGEXP) OPERATOR -------------------------------------------------
^ is used to check the begining of the string.
$ is used to check the ending of the string.
| logical or

EXAMPLE:
       Problem: Filter the jobTitle which contains the "sale";
        select from the employee where jobTitle REGEXP "sale";

Problems: Jobtitle start with the sales ..?
 select from the employee where jobTitle REGEXP "^sale";

Problems: Jobtitle ends with the "rep"?
 select from the employee where jobTitle REGEXP "rep$";

Problems: Jobtitle starts with J or L ?
 select from the employee where jobTitle REGEXP "^J| ^L";

Problems: Jobtitle that start with a more than either this or that or in a given range two letters?
Solution:  In such cases we uses the Range operator by using the Square Brackets..
     select from the employee where jobTitle REGEXP "[a-h]";
      select from the employee where jobTitle REGEXP "[abcdefg]";

Problem: Select all the name which starts with a-h or end with lie?
 select from the employee where jobTitle REGEXP "^[a-h] | lie $";

------------------------- IS NULL OPERATOR -------------------------------------

Select * from orders
where comments IS NULL;

selects * from orders where shippedDate is not null;

----------------------------- ORDERS BY CLAUSE ------------------------------------
 DESC is used to sort into the decending orders...

Example: Select contactLastName,ContactFirstName,
from customers order by city DESC..

Note: we can also use the order by not selcting the field...
Example:
       Select customerName,contactLastName,contactFirstName
from customers 
order by city DESC

Case 2: Sort the data on the basis of the last name if they are lived into the same city...
     Select customerName,contactLastName,contactFirstName,city
from customers 
order by city DESC,contactLastName;

-----------------  LIMIT CLAUSE -------------------------------------------------
 This is generally used to find the top k ?
If one arguments is used then its means first n identity..
if two arguments are used it means escape the first one and show the next N identity..



----------------------- QUERYING MULTIPLES TABLES--------------------------------------

     --------------------INNER JOIN -------------------------------------
     Select table1.field1 ,table1.field2,
             table2.field1
from table1 inner join table2
  on table1.field1=table2.field2;


Why we use the Alias Name ?
This is so to make our code more readable and understandable..


 ----------------------JOINING MULTIPLE TABLES ----------------------------
select orderNumber,
status,
o.customerNumber,
e.firstName as "Sales Person Name",
e.jobTitle
from orders o
join customers c
on o.customerNumber= c.customerNumber
join employees e
on c.salesRepEmployeeNumber=e.employeeNumber

-----------------  SELF JOIN -------------------------------------------------

Self join is the technique to join the table with itself..
[ON] is used to define the condition on which the table are joined to each others..

EXAMPLE :
select emp.employeeNumber,
       emp.firstName,
       emp.jobTitle,
       mgr.firstName as "Manager Name",
       mgr.jobTitle as "Manager Title"
from employees emp
join employees mgr

---------------------- IMPLICIT JOIN -------------------------------------------
Cross Join is the example of the implicit join.
NOTE: [ JOIN ] keyword is not used in implicit join.

select p.customerNumber,
       paymentDate,
      amount,
      customerName
from payment p,customers c
where p.customerNumber=c.customerNumber..

[Where] is used for the defining the conditions..

------------------------  OUTER JOIN --------------------------------------------
 
   ----------- INNER JOIN ---------------------------------------------

1. Inner Join
Concept: Retrieves only the rows that have matching values in both tables.
Key Idea: If there's no match, the row is excluded.

2. Left Join
Concept: Retrieves all rows from the left table and the matching rows from the right table.
         If no match exists, NULL is filled for the right table's columns.
Key Idea: Left = All rows from the first (left) table.
Explanation: All students are included. Charlie has no matching course, so Course is NULL.

3. Right Join
Concept:   Retrieves all rows from the right table and the matching rows from the left table.
           If no match exists, NULL is filled for the left table's columns.
Key Idea:  Right = All rows from the second (right) table.
Explanation:  All courses are included. History has no matching student, so Name is NULL.

4. Outer Join (Full Outer Join)
Concept: Retrieves all rows from both tables, including unmatched rows.
         If thereâ€™s no match, NULL is filled in for missing values.

Key Idea: Combines the results of a left join and a right join.
Explanation: Includes all rows, with NULL for missing matches.

Venn Diagrams:
Inner Join: Intersection (common part of both circles).
Outer Join: Union (entirety of both circles).
Left Join: Entire left circle, including overlap with the right.
Right Join: Entire right circle, including overlap with the left.


---------- SELF OUTER JOIN --------------------------------------------------
A self join is a join where a table is joined with itself.
This is typically done when rows in the same table have a relationship with each other, and we want to analyze or fetch data based on that relationship.

When combined with the concept of an outer join, a self join allows us to include all rows from the table, even if some rows do not have matches based on the joining condition.

[Core Concept of an Outer Self Join]
A self join creates a Cartesian relationship within the same table.
An outer self join ensures that all rows are included, even if some rows do not satisfy the join condition.
It is useful for finding relationships, identifying missing associations, or analyzing incomplete data within the same table.

Key Insights
Self Join: In this case, you're connecting employees with their managers from the same table.
Outer Join: Ensures that even employees without a manager are included (e.g., Alice and Eve).
Versatility: This approach can be extended to other relationships within the same table, such as hierarchies or dependencies.
The outer self join is particularly useful for handling scenarios where the data may be incomplete or when analyzing hierarchical relationships in a dataset.


-------------  USING CLAUSE ---------------------------------------------------

The USING clause in SQL is a shorthand that simplifies the syntax of joins when two tables have a common column (or set of columns) with the same name.
It eliminates the need to explicitly specify the table name when referring to the common column in the join condition.

Core Concept
The USING clause is used in JOIN operations to specify the column(s) that the tables will join on.
These columns must have the same name in both tables.
It is most commonly used in INNER JOIN, LEFT JOIN, or RIGHT JOIN.

Benefits of Using USING:
Simplifies Syntax: Avoids repetitive table name prefixes for the common column(s).
Improves Readability: Focuses on the logic without cluttering the query.

Notes:
If the common column(s) are included in the SELECT clause, they are displayed only once in the result, unlike the ON clause, which may show duplicates unless handled.
The USING clause cannot be used if the column names in the two tables are different. For such cases, use the ON clause



----------  NATURAL JOIN --------------------------------------------------
We don't specify the columns.
Loose control on the join condition,expected result..

EXAMPLE:
select orderNumber, customerNumber,customerName
from orders
NATURAL JOIN customers;

------------------------------------------------------------------------------------------------------------------------------------












